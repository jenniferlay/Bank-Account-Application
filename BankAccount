package coe528.project;

import java.util.*;

//Overview: A BankAccount represents the balance of the customer user 
//          a BankAccount's balance must be greater than or equal to zero
//          If balance is below zero, it is invalid because balance cannot be negative
//          BankAccounts are mutable

// AF(c) = a bank account, B, such that B.balance = c.balance

// RI(c) =  if c.balance >= 0 then true, otherwise false

public abstract class BankAccount {
   
    //rep
    protected int balance;
    
    //EFFECTS: sets balance to 100
    public BankAccount(){
        balance = 100;
    }
    
    //EFFECTS: returns balance
    protected int getBalance(){
        return balance;
    }
    
    //EFFECTS: Sets this.balance to updatedBalance if updatedBalance >= 0
    protected void setBalance(int updatedBalance){
        if(updatedBalance >= 0)
            this.balance = updatedBalance;
    }
    
    
    //EFFECTS: adds amount to this.balance if amount >= 0
    protected void addAmount(int amount){
        balance += amount;
    }
    
    //EEFECTS: removes amount from this.balance if amount >= 0 and amount <= this.balance
    protected void removeAmount(int amount){
            balance -= amount;
    }
    
    //EFFECTS: If amount >= 50, and if this.balance >= (amount + additional fee), then amount + fee is subtracted from this.balance 
    public void onlinePurchase(int amount){} 
    
    
    //EFFECTS: Returns state of current customer level
    public  String getCustomerLevel(){return "String in abstract";}
    
    
    //EFFECTS: returns abstraction function, returns balance of this.balance
    @Override
    public String toString(){
        return "Balance is $" + balance;
    }
    
    //EFFECTS: Returns true if the Rep Invariant holds, otherwise returns false
    public boolean RepOK(){
        if(this.balance > 0){
            return true;}
        return false;
    }
    
} 
